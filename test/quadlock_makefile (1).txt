# Makefile pour Quadlock Encrypt
# Usage: make [target]

PYTHON = python3
VENV = quadlock_env
VENV_BIN = $(VENV)/bin
PIP = $(VENV_BIN)/pip
PYTHON_VENV = $(VENV_BIN)/python

.PHONY: help install test clean setup dev lint format security audit package docs

# Cible par d√©faut
help:
	@echo "üîê Quadlock Encrypt - Makefile"
	@echo "=============================="
	@echo ""
	@echo "Cibles disponibles:"
	@echo "  install    - Installation compl√®te avec d√©pendances"
	@echo "  setup      - Configuration initiale (premi√®re utilisation)"
	@echo "  test       - Ex√©cution des tests complets"
	@echo "  dev        - Installation pour d√©veloppement"
	@echo "  clean      - Nettoyage des fichiers temporaires"
	@echo "  lint       - V√©rification du code (pylint, flake8)"
	@echo "  format     - Formatage automatique du code (black)"
	@echo "  security   - Audit de s√©curit√© (bandit)"
	@echo "  audit      - Audit des d√©pendances (pip-audit)"
	@echo "  package    - Cr√©ation d'un package de distribution"
	@echo "  docs       - G√©n√©ration de la documentation"
	@echo "  benchmark  - Tests de performance"
	@echo ""
	@echo "Exemples:"
	@echo "  make install    # Installation compl√®te"
	@echo "  make test      # Tests rapides"
	@echo "  make clean     # Nettoyage"

# Installation compl√®te
install: $(VENV)/pyvenv.cfg
	@echo "üì¶ Installation des d√©pendances..."
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	@chmod +x *.sh
	@echo "‚úÖ Installation termin√©e!"

# Cr√©ation de l'environnement virtuel
$(VENV)/pyvenv.cfg:
	@echo "üèóÔ∏è  Cr√©ation de l'environnement virtuel..."
	$(PYTHON) -m venv $(VENV)

# Configuration initiale
setup: install
	@echo "‚öôÔ∏è  Configuration initiale..."
	$(PYTHON_VENV) quadlock_encrypt.py config --create
	@echo "üß™ Ex√©cution du test initial..."
	@./test_quadlock.sh
	@echo "‚úÖ Configuration termin√©e!"

# Tests complets
test:
	@echo "üß™ Ex√©cution des tests..."
	@./test_quadlock.sh
	@echo "üîç Test d'int√©grit√©..."
	@./verify_integrity.sh
	@echo "üìä Tests de performance basiques..."
	@$(PYTHON_VENV) -c "
import time
import secrets
from quadlock_encrypt import QuadlockApp
app = QuadlockApp()
data = secrets.token_bytes(1024*1024)  # 1MB
with open('test_perf.bin', 'wb') as f:
    f.write(data)
start = time.time()
app.encrypt_file('test_perf.bin', 'testpassword123')
encrypt_time = time.time() - start
print(f'‚è±Ô∏è  Chiffrement 1MB: {encrypt_time:.2f}s')
import os
os.remove('test_perf.bin')
if os.path.exists('test_perf.bin.qlk'):
    os.remove('test_perf.bin.qlk')
if os.path.exists('test_perf.bin.shares'):
    os.remove('test_perf.bin.shares')
"

# Installation pour d√©veloppement
dev: install
	$(PIP) install pylint flake8 black bandit pip-audit pytest coverage
	@echo "üõ†Ô∏è  Environnement de d√©veloppement pr√™t!"

# V√©rification du code
lint:
	@echo "üîç Analyse statique du code..."
	$(VENV_BIN)/pylint quadlock_encrypt.py --disable=C0103,R0903,W0613 || true
	$(VENV_BIN)/flake8 quadlock_encrypt.py --max-line-length=100 --ignore=E203,W503 || true
	@echo "‚úÖ Analyse termin√©e!"

# Formatage du code
format:
	@echo "üé® Formatage du code..."
	$(VENV_BIN)/black quadlock_encrypt.py --line-length=100
	@echo "‚úÖ Formatage termin√©!"

# Audit de s√©curit√©
security:
	@echo "üîí Audit de s√©curit√© du code..."
	$(VENV_BIN)/bandit -r . -f json -o security_report.json || true
	$(VENV_BIN)/bandit -r . || true
	@echo "‚úÖ Audit de s√©curit√© termin√©!"

# Audit des d√©pendances
audit:
	@echo "üîç Audit des d√©pendances..."
	$(VENV_BIN)/pip-audit --format=json --output=dependencies_audit.json || true
	$(VENV_BIN)/pip-audit || true
	@echo "‚úÖ Audit des d√©pendances termin√©!"

# Nettoyage
clean:
	@echo "üßπ Nettoyage..."
	rm -rf __pycache__/
	rm -rf *.pyc
	rm -rf .pytest_cache/
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	rm -f test_*.txt test_*.qlk test_*.shares test_*_decrypted
	rm -f *.json.bak
	rm -f security_report.json dependencies_audit.json
	@echo "‚úÖ Nettoyage termin√©!"

# Nettoyage complet (inclut l'environnement virtuel)
distclean: clean
	rm -rf $(VENV)/
	@echo "üóëÔ∏è  Nettoyage complet termin√©!"

# Cr√©ation d'un package de distribution
package:
	@echo "üì¶ Cr√©ation du package de distribution..."
	@mkdir -p dist/quadlock-encrypt
	@cp quadlock_encrypt.py dist/quadlock-encrypt/
	@cp *.sh dist/quadlock-encrypt/
	@cp requirements.txt dist/quadlock-encrypt/
	@cp default_config.json dist/quadlock-encrypt/
	@cp README.md dist/quadlock-encrypt/ 2>/dev/null || echo "README.md non trouv√©"
	@cp LICENSE dist/quadlock-encrypt/ 2>/dev/null || echo "LICENSE non trouv√©"
	@cd dist && tar -czf quadlock-encrypt-$(shell date +%Y%m%d).tar.gz quadlock-encrypt/
	@echo "‚úÖ Package cr√©√©: dist/quadlock-encrypt-$(shell date +%Y%m%d).tar.gz"

# G√©n√©ration de la documentation
docs:
	@echo "üìö G√©n√©ration de la documentation..."
	@$(PYTHON_VENV) -c "
import quadlock_encrypt
import inspect
import json

# Extraction automatique de la documentation des fonctions
app = quadlock_encrypt.QuadlockApp()
crypto = quadlock_encrypt.QuadlockCrypto()

doc = {
    'QuadlockApp': {
        'methods': [method for method in dir(app) if not method.startswith('_')],
        'docstring': app.__class__.__doc__
    },
    'QuadlockCrypto': {
        'methods': [method for method in dir(crypto) if not method.startswith('_')],
        'docstring': crypto.__class__.__doc__
    }
}

with open('api_documentation.json', 'w') as f:
    json.dump(doc, f, indent=2)
    
print('üìÑ Documentation API g√©n√©r√©e: api_documentation.json')
"

# Tests de performance
benchmark:
	@echo "‚ö° Tests de performance..."
	@$(PYTHON_VENV) -c "
import time
import secrets
import os
from quadlock_encrypt import QuadlockApp

app = QuadlockApp()
sizes = [1024, 10240, 102400, 1048576]  # 1KB, 10KB, 100KB, 1MB

print('üìä Benchmarks de chiffrement:')
print('Taille\\t\\tChiffrement\\tD√©chiffrement')
print('-' * 50)

for size in sizes:
    # Cr√©ation du fichier de test
    data = secrets.token_bytes(size)
    filename = f'bench_{size}.bin'
    with open(filename, 'wb') as f:
        f.write(data)
    
    # Test de chiffrement
    start = time.time()
    app.encrypt_file(filename, 'benchpassword123')
    encrypt_time = time.time() - start
    
    # Test de d√©chiffrement
    with open(filename + '.shares', 'r') as f:
        lines = f.readlines()
    shares = [line.split(': ')[1].strip() for line in lines if line.startswith('Part')][:3]
    
    start = time.time()
    app.decrypt_file(filename + '.qlk', shares)
    decrypt_time = time.time() - start
    
    # Formatage de la taille
    if size < 1024:
        size_str = f'{size}B'
    elif size < 1048576:
        size_str = f'{size//1024}KB'
    else:
        size_str = f'{size//1048576}MB'
    
    print(f'{size_str}\\t\\t{encrypt_time:.3f}s\\t\\t{decrypt_time:.3f}s')
    
    # Nettoyage
    os.remove(filename)
    os.remove(filename + '.qlk')
    os.remove(filename + '.shares')
    if os.path.exists(filename + '_decrypted'):
        os.remove(filename + '_decrypted')
"

# Installation rapide pour CI/CD
install-ci:
	$(PYTHON) -m pip install --upgrade pip
	$(PYTHON) -m pip install -r requirements.txt

# Tests pour CI/CD
test-ci:
	$(PYTHON) quadlock_encrypt.py config --create
	echo "Test CI/CD" > test_ci.txt
	$(PYTHON) quadlock_encrypt.py encrypt test_ci.txt --password "citest123"
	@if [ -f "test_ci.txt.qlk" ]; then echo "‚úÖ Test CI chiffrement OK"; else echo "‚ùå Test CI chiffrement √âCHEC"; exit 1; fi
	rm -f test_ci.txt test_ci.txt.qlk test_ci.txt.shares

# V√©rification des pr√©requis
check-deps:
	@echo "üîç V√©rification des pr√©requis..."
	@$(PYTHON) --version || (echo "‚ùå Python non install√©"; exit 1)
	@$(PYTHON) -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}'); assert sys.version_info >= (3,7)" || (echo "‚ùå Python 3.7+ requis"; exit 1)
	@which pip > /dev/null || (echo "‚ùå pip non install√©"; exit 1)
	@echo "‚úÖ Pr√©requis OK"

# Installation compl√®te avec v√©rifications
install-full: check-deps install setup
	@echo "üéâ Installation compl√®te termin√©e!"

# D√©marrage rapide
quick-start:
	@echo "üöÄ D√©marrage rapide Quadlock Encrypt"
	@echo "====================================="
	@echo ""
	@echo "1. Cr√©er un fichier de test:"
	@echo "   echo 'Document secret' > secret.txt"
	@echo ""
	@echo "2. Chiffrer le fichier:"
	@echo "   ./quadlock.sh encrypt secret.txt --password 'monmotdepasse'"
	@echo ""
	@echo "3. D√©chiffrer le fichier:"
	@echo "   ./quadlock.sh decrypt secret.txt.qlk --shares part1 part2 part3"
	@echo ""
	@echo "4. Aide compl√®te:"
	@echo "   ./quadlock.sh --help"

# Installation pour serveur (sans interface)
install-server: $(VENV)/pyvenv.cfg
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	@chmod +x quadlock_encrypt.py
	@echo "üñ•Ô∏è  Installation serveur termin√©e!"

# Export des variables d'environnement
export:
	@echo "# Variables d'environnement Quadlock"
	@echo "export QUADLOCK_PATH=$(PWD)"
	@echo "export QUADLOCK_VENV=$(PWD)/$(VENV)"
	@echo "export PATH=$(PWD):$PATH"

# V√©rification de la s√©curit√© des configurations
check-security:
	@echo "üîí V√©rification de la s√©curit√© des configurations..."
	@$(PYTHON_VENV) -c "
import json
import os

configs = ['default_config.json', 'quadlock_config.json']
security_issues = []

for config_file in configs:
    if os.path.exists(config_file):
        with open(config_file, 'r') as f:
            config = json.load(f)
        
        print(f'üìÑ Analyse de {config_file}:')
        
        # V√©rifications de s√©curit√©
        if config.get('pbkdf2_iterations', 0) < 50000:
            security_issues.append(f'{config_file}: It√©rations PBKDF2 trop faibles')
            print('  ‚ö†Ô∏è  It√©rations PBKDF2 < 50000 (recommand√©: 100000+)')
        else:
            print('  ‚úÖ It√©rations PBKDF2 OK')
            
        if config.get('salt_size', 0) < 16:
            security_issues.append(f'{config_file}: Taille de sel insuffisante')
            print('  ‚ö†Ô∏è  Taille de sel < 16 bytes (recommand√©: 32+)')
        else:
            print('  ‚úÖ Taille de sel OK')
            
        if config.get('shamir_threshold', 0) < 2:
            security_issues.append(f'{config_file}: Seuil Shamir trop faible')
            print('  ‚ö†Ô∏è  Seuil Shamir < 2 (recommand√©: 3+)')
        else:
            print('  ‚úÖ Seuil Shamir OK')
            
        if len(config.get('algorithms', [])) < 2:
            security_issues.append(f'{config_file}: Trop peu d\\'algorithmes')
            print('  ‚ö†Ô∏è  < 2 algorithmes (recommand√©: 3+)')
        else:
            print('  ‚úÖ Nombre d\\'algorithmes OK')
        
        print()

if security_issues:
    print('‚ùå Probl√®mes de s√©curit√© d√©tect√©s:')
    for issue in security_issues:
        print(f'  - {issue}')
    exit(1)
else:
    print('‚úÖ Toutes les configurations sont s√©curis√©es!')
"

# Tests de stress
stress-test:
	@echo "üî• Tests de stress..."
	@$(PYTHON_VENV) -c "
import os
import time
import secrets
from concurrent.futures import ThreadPoolExecutor
from quadlock_encrypt import QuadlockApp

def encrypt_decrypt_cycle(file_id):
    app = QuadlockApp()
    filename = f'stress_{file_id}.bin'
    
    # Donn√©es al√©atoires
    data = secrets.token_bytes(10240)  # 10KB
    with open(filename, 'wb') as f:
        f.write(data)
    
    try:
        # Chiffrement
        app.encrypt_file(filename, f'password{file_id}')
        
        # Lecture des parts
        with open(filename + '.shares', 'r') as f:
            lines = f.readlines()
        shares = [line.split(': ')[1].strip() for line in lines if line.startswith('Part')][:3]
        
        # D√©chiffrement
        app.decrypt_file(filename + '.qlk', shares)
        
        return True
    except Exception as e:
        print(f'‚ùå Erreur cycle {file_id}: {e}')
        return False
    finally:
        # Nettoyage
        for ext in ['', '.qlk', '.shares', '_decrypted']:
            try:
                os.remove(filename + ext)
            except:
                pass

print('‚ö° D√©marrage des tests de stress (10 cycles parall√®les)...')
start_time = time.time()

with ThreadPoolExecutor(max_workers=5) as executor:
    results = list(executor.map(encrypt_decrypt_cycle, range(10)))

end_time = time.time()
success_rate = sum(results) / len(results) * 100

print(f'üìä R√©sultats du stress test:')
print(f'  - Cycles r√©ussis: {sum(results)}/{len(results)}')
print(f'  - Taux de succ√®s: {success_rate:.1f}%')
print(f'  - Temps total: {end_time - start_time:.2f}s')
print(f'  - Temps moyen/cycle: {(end_time - start_time)/len(results):.2f}s')

if success_rate < 100:
    print('‚ö†Ô∏è  Certains cycles ont √©chou√©!')
    exit(1)
else:
    print('‚úÖ Tous les cycles de stress ont r√©ussi!')
"